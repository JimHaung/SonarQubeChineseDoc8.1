{"expireTime":9007200835323871000,"key":"transformer-remark-markdown-html-c53e265d963dede6a0a830b9ff8b6ec9-gatsby-remark-custom-blocks-/SonarQubeChineseDoc8.1","val":"<h2>Overview</h2>\n<p>In SonarQube, analyzers contribute rules which are executed on source code to generate issues. There are four types of rules:</p>\n<ul>\n<li>Code Smell (Maintainability domain)</li>\n<li>Bug (Reliability domain)</li>\n<li>Vulnerability (Security domain)</li>\n<li>Security Hotspot (Security domain)</li>\n</ul>\n<p>For Code Smells and Bugs, zero false-positives are expected. At least this is the target so that developers don't have to wonder if a fix is required.</p>\n<p>For Vulnerabilities, the target is to have more than 80% of issues be true-positives.</p>\n<p>Security Hotspot rules draw attention to code that is security-sensitive. It is expected that more than 80% of the issues will be quickly resolved as \"Reviewed\" after review by a developer.</p>\n<p>The Rules page is the entry point where you can discover all the existing rules or create new ones based on provided templates.</p>\n<h2>Rules</h2>\n<p>By default, when entering the top menu item \"Rules\", you will see all the available rules brought by the analyzers installed on your SonarQube instance. You have the ability to narrow the selection based on search criteria in the left pane:</p>\n<ul>\n<li><strong>Language</strong>: the language to which a rule applies.</li>\n<li><strong>Type</strong>: Bug, Vulnerability, Code Smell or Security Hotspot rules.</li>\n<li><strong>Tag</strong>: it is possible to add tags to rules in order to classify them and to help discover them more easily.</li>\n<li><strong>Repository</strong>: the engine/analyzer that contributes rules to SonarQube.</li>\n<li><strong>Default Severity</strong>: the original severity of the rule - as defined by the analyzer that contributes this rule.</li>\n<li>\n<p><strong>Status</strong>: rules can have 3 different statuses:</p>\n<ul>\n<li><strong>Beta</strong>: The rule has been recently implemented and we haven't gotten enough feedback from users yet, so there may be false positives or false negatives.</li>\n<li><strong>Deprecated</strong>: The rule should no longer be used because a similar, but more powerful and accurate rule exists.</li>\n<li><strong>Ready</strong>: The rule is ready to be used in production.</li>\n</ul>\n</li>\n<li><strong>Available Since</strong>: date when a rule was first added on SonarQube. This is useful to list all the new rules since the last upgrade of a plugin for instance.</li>\n<li><strong>Template</strong>: display rule templates that allow to create custom rules (see later on this page).</li>\n<li><strong>Quality Profile</strong>: inclusion in or exclusion from a specific profile</li>\n</ul>\n<p>If a quality profile is selected, it is also possible to check for its active severity and whether it is inherited or not. See the Quality Profile documentation for more.</p>\n<h2>Rule Details</h2>\n<p>To see the details of a rule, either click on it, or use the right arrow key. Along with basic rule data, you'll also be able to see which, if any, profiles it's active in and how many open issues have been raised with it.</p>\n<p>The following actions are available only if you have the right permissions (\"Administer Quality Profiles and Gates\"):</p>\n<ul>\n<li>\n<p><strong>Add/Remove Tags</strong>:</p>\n<ul>\n<li>It is possible to add existing tags on a rule, or to create new ones (just enter a new name while typing in the text field).</li>\n<li>Note that some rules have built-in tags that you cannot remove - they are provided by the plugins which contribute the rules.</li>\n</ul>\n</li>\n<li>\n<p><strong>Extend Description</strong>:</p>\n<ul>\n<li>You can extend rule descriptions to let users know how your organization is using a particular rule or to give more insight on a rule.</li>\n<li>Note that the extension will be available to non-admin users as a normal part of the rule details.</li>\n</ul>\n</li>\n</ul>\n<h2>Rule Templates and Custom Rules</h2>\n<p>Rule Templates are provided by plugins as a basis for users to define their own custom rules in SonarQube. To find templates, select the <strong>Show Templates Only</strong> facet from the the \"Template\" dropdown:</p>\n<p><img src=\"/images/rule-templates.png\" alt=\"Rule templates.\"></p>\n<p>To create a custom rule from a template click the <strong>Create</strong> button next to the \"Custom Rules\" heading and fill in the following information:</p>\n<ul>\n<li>Name</li>\n<li>Key (auto-suggested)</li>\n<li>Description (Markdown format is supported)</li>\n<li>Default Severity</li>\n<li>Status</li>\n<li>The parameters specified by the template</li>\n</ul>\n<p>You can navigate from a template to the details of custom rules defined from it by clicking the link in the \"Custom Rules\" section.</p>\n<p><img src=\"/images/rule-template-details.png\" alt=\"Rule template details.\"></p>\n<h3>Custom Rules</h3>\n<p>Custom Rules are considered like any other rule, except that you can edit or delete them:</p>\n<p><img src=\"/images/rules-custom.png\" alt=\"Custom rules.\"></p>\n<p><strong>Note:</strong> When deleting a custom rule, it is not physically removed from the SonarQube instance. Instead, its status is set to \"REMOVED\". This allows current or old issues related to this rule to be displayed properly in SonarQube until they are fully removed.</p>\n<h2>Extending Coding Rules</h2>\n<p>Custom coding rules can be added. See <a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a> for detailed information and tutorials.</p>\n<h2>Rule Types and Severities</h2>\n<h3>How are rules categorized?</h3>\n<p>The SonarQube Quality Model divides rules into four categories: Bugs, Vulnerabilities, Security Hotspots, and Code Smells. Rules are assigned to categories based on the answers to these questions:</p>\n<p><strong>Is the rule about code that is demonstrably wrong, or more likely wrong than not?</strong><br>\nIf the answer is \"yes\", then it's a Bug rule.<br>\nIf not...</p>\n<p><strong>Is the rule about code that could be exploited by a hacker?</strong><br>\nIf so, then it's a Vulnerability rule.<br>\nIf not...</p>\n<p><strong>Is the rule about code that is security-sensitive?</strong><br>\nIf so, then it's a Security Hotspot rule.<br>\nIf not...</p>\n<p><strong>Is the rule neither a Bug nor a Vulnerability?</strong><br>\nIf so, then it's a Code Smell rule.</p>\n<h2>How are severities assigned?</h2>\n<p>To assign severity to a rule, we ask a further series of questions. The first one is basically:</p>\n<p><strong>What's the worst thing that could happen?</strong></p>\n<p>In answering this question, we try to factor in Murphy's Law without predicting Armageddon.</p>\n<p>Then we assess whether the impact and likelihood of the Worst Thing (see <em>How are severity and likelihood decided?</em>, below) are high or low, and plug the answers into a truth table:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Impact</th>\n<th>Likelihood</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Blocker</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>Critical</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/cross.svg\"></td>\n</tr>\n<tr>\n<td>Major</td>\n<td><img src=\"/images/cross.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>Minor</td>\n<td><img src=\"/images/cross.svg\"></td>\n<td><img src=\"/images/cross.svg\"></td>\n</tr>\n</tbody>\n</table>\n<h2>How are severity and likelihood decided?</h2>\n<p>To assess the severity of a rule, we start from the Worst Thing (see <em>How are severities assigned?</em>, above) and ask category-specific questions.</p>\n<h3>Bugs</h3>\n<p>Impact: <strong>Could the Worst Thing cause the application to crash or to corrupt stored data?</strong></p>\n<p>Likelihood: <strong>What's the probability that the Worst Thing will happen?</strong></p>\n<h3>Vulnerabilities</h3>\n<p>Impact: <strong>Could the exploitation of the Worst Thing result in significant damage to your assets or your users?</strong></p>\n<p>Likelihood: <strong>What is the probability that a hacker will be able to exploit the Worst Thing?</strong></p>\n<h3>Security Hotspots</h3>\n<p>Security Hotspots are not assigned severities as it is unknown whether there is truly an underlying vulnerability until they are reviewed.</p>"}